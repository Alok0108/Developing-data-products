library(nlme)
library(lattice)
xyplot(weight ~ Time | Diet, BodyWeight)
library(swirl)
install_course("Exploratory Data Analysis")
swirl()
dist(dataFrame)
hc <- hclust(distxy)
plot(hc)
plot(as.dendrogram(hc))
abline(h=1.5, col= "blue")
abline(h=.4, col= "red")
5
12
abline(h=.05, col= "green")
dist(dFsm)
hc
heatmap(dataMatrix, Colv = cm.colors(25))
heatmap(dataMatrix, Col = cm.colors(25))
heatmap(dataMatrix, col = cm.colors(25))
heatmap(mt)
mt
plot(denmt)
distmt
cmt
cmat
points(cx,cy,col("red", "orange", "purple"), pch = 3, cex = 2, lwd = 2)
points(cx,cy,col = c("red", "orange", "purple"), pch = 3, cex = 2, lwd = 2)
mdist(x,y,cx,cy)
apply(distTmp, 2, which.min)
points(x,y,pch = 19, cex = 2, col = cols1[newClust])
tapply(x, newClust, mean)
tapply(y, newClust, mean)
points(newCx, newCy, col = cols1, pch = 8, cex = 2, lwd =2)
mdist(x,y, newCx, newCy)
apply(distTmp2, 2, which.min)
points(x,y,pch = 19, cex = 2, col = cols1[newClust2])
tapply(x, newClust2, mean)
tapply(y, newClust2, mean)
points(finalCx, finalCy, col = cols1, pch = 9, cex = 2, lwd = 2)
kmeans(dataFrame, 3)
kmObj$iter
plot(x, y, col = kmObj$cluster,pch = 19, cex = 2)
points(kmObj$centers, col = c("black", "red", "green"), pch = 3, cex = 3, lwd = 3)
plot(x, y, col = kmeans(dataFrame, 6)$cluster, pch = 19, cex = 2)
plot(x, y, col = kmeans(dataFrame, 6)$cluster, pch = 19, cex = 2)
plot(x, y, col = kmeans(dataFrame, 6)$cluster, pch = 19, cex = 2)
head(dataMatrix)
heatmap(dataMatrix)
myedit(addPatt.R)
myedit("addPatt.R")
myedit(name = "addPatt.R")
myedit("addPatt.R")
setwd("~/")
myedit("addPatt.R")
myedit("addPatt.R")
myedit("addPart.R")
q()
install.packages("caret")
setwd("~/Data Science Specialization/Data Science repo/Practical-Machine-Learning-project")
install.packages("rattle")
library(caret)
library(rattle)
Train.Data <- read.csv(url("https://d396qusza40orc.cloudfront.net/predmachlearn/pml-training.csv"),header=TRUE)
Train.Data <- read.csv(url("http://d396qusza40orc.cloudfront.net/predmachlearn/pml-training.csv"),header=TRUE)
setInternet2(TRUE)
Train.Data <- read.csv(url("https://d396qusza40orc.cloudfront.net/predmachlearn/pml-training.csv"),header=TRUE)
library(RCurl)
setInternet2(TRUE)
Train.Data <- read.csv(textConnection(getURL("https://d396qusza40orc.cloudfront.net/predmachlearn/pml-training.csv"),header=TRUE))
library(RCurl)
setInternet2(TRUE)
Train.Data <- read.csv(textConnection(getURL("https://d396qusza40orc.cloudfront.net/predmachlearn/pml-training.csv")))
dim(TrainData)
library(RCurl)
setInternet2(TRUE)
Train.Data <- read.csv(textConnection(getURL("https://d396qusza40orc.cloudfront.net/predmachlearn/pml-training.csv")))
dim(Train.Data)
Test.Data <- read.csv(textConnection(getURL("https://d396qusza40orc.cloudfront.net/predmachlearn/pml-testing.csv")))
dim(Test.Data)
str(Train.Data)
Train.Data[1]
nrow(Train.Data)
ncol(Train.Data)
ColToRemove <- which(colSums(is.na(TrainData) |TrainData=="")>0.9*dim(TrainData)[1])
ColToRemove <- which(colSums(is.na(Train.Data) |TrainData=="")>0.9*dim(Train.Data)[1])
ColToRemove <- which(colSums(is.na(Train.Data) |Train.Data=="")>0.9*dim(Train.Data)[1])
TrainDataClean <- Train.Data[,-ColToRemove]
TrainDataClean <- TrainDataClean[,-c(1:7)]
dim(TrainDataClean)
ColToRemove <- which(colSums(is.na(Test.Data) |Test.Data=="")>0.9*dim(Test.Data)[1])
TestDataClean <- Test.Data[,-ColToRemove]
TestDataClean <- TestDataClean[,-1]
dim(TestDataClean)
dim(TestDataClean)[2]
set.seed(12345)
inTrain1 <- createDataPartition(TrainDataClean$classe, p=0.75, list=FALSE)
Train1 <- TrainDataClean[inTrain1,]
Test1 <- TrainDataClean[-inTrain1,]
dim(Train1)
dim(Test1)
trControl <- trainControl(method="cv", number=5)
model_CT <- train(classe~., data=Train1, method="rpart", trControl=trControl)
install.packages("e1071")
library(e1071)
trControl <- trainControl(method="cv", number=5)
model_CT <- train(classe~., data=Train1, method="rpart", trControl=trControl)
fancyRpartPlot(model_CT$finalModel)
library(e1071)
library(rpart)
trControl <- trainControl(method="cv", number=5)
model_CT <- train(classe~., data=Train1, method="rpart", trControl=trControl)
fancyRpartPlot(model_CT$finalModel)
library(e1071)
library("rpart.plot")
install.packages("rpart.plot")
library(e1071)
library("rpart.plot")
trControl <- trainControl(method="cv", number=5)
model_CT <- train(classe~., data=Train1, method="rpart", trControl=trControl)
fancyRpartPlot(model_CT$finalModel)
trainpred <- predict(model_CT,newdata=Test1)
confMatCT <- confusionMatrix(Test1$classe,trainpred)
# display confusion matrix and model accuracy
confMatCT$table
trainpred <- predict(model_CT,newdata=Test1)
confMatCT <- confusionMatrix(Test1$classe,trainpred)
# display confusion matrix and model accuracy
confMatCT$table
confMatCT$overall[1]
model_RF <- train(classe~., data=Train1, method="rf", trControl=trControl, verbose=FALSE)
plot(model_RF,main="Accuracy of Random forest model by number of predictors")
trainpred <- predict(model_RF,newdata=Test1)
confMatRF <- confusionMatrix(Test1$classe,trainpred)
# display confusion matrix and model accuracy
confMatRF$table
trainpred <- predict(model_RF,newdata=Test1)
confMatRF <- confusionMatrix(Test1$classe,trainpred)
# display confusion matrix and model accuracy
confMatRF$table
confMatRF$overall[1]
plot(model_RF$finalModel,main="Model error of Random forest model by number of trees")
MostImpVars <- varImp(model_RF)
MostImpVars
model_GBM <- train(classe~., data=Train1, method="gbm", trControl=trControl, verbose=FALSE)
plot(model_GBM)
trainpred <- predict(model_GBM,newdata=Test1)
confMatGBM <- confusionMatrix(Test1$classe,trainpred)
confMatGBM$table
confMatGBM$overall[1]
FinalTestPred <- predict(model_RF,newdata=TestDataClean)
FinalTestPred
setwd("~/Data Science Specialization/Data Science repo/Developing-data-products")
install.packages("leaflet")
